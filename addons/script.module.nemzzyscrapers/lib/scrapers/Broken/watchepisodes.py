import requestsimport refrom kodi_six import xbmc, xbmcgui, xbmcaddonfrom six import PY2import resolveurldialog = xbmcgui.Dialog()from bs4 import BeautifulSoupfrom collections import OrderedDictNotice = xbmc.LOGNOTICE if PY2 else xbmc.LOGINFOHeaders = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' }class Scraper:	def __init__(self):		self.Base = ('https://www.watchepisodes4.com/%s')		self.Search = ('search/%s')		self.links = []		self.cleaned = []	def Index(self,type, term,year,imdb):		year = year.strip()		MovieTitle = term		term = term.lower()		if type == 'TV':			try:				season = re.findall(r'''(s\d+)''',term.lower(),flags=re.I)[0].replace('s0','').replace('e0','').replace('s','')				episode = re.findall(r'''(e\d+)''',term.lower(),flags=re.I)[0].replace('e0','').replace('e0','').replace('e','')				StartUrl = re.findall("(s[0-9][0-9]e[0-9][0-9])",term.lower())[0]				term = term.replace(StartUrl,'').strip().replace(' ','-')				link = requests.get(self.Base % term,headers=Headers).text				soup = BeautifulSoup(link,'html.parser')				checker = ('season-%s-episode-%s' % (season,episode))				r = soup.find_all('div', class_={'el-item'})				for i in r:					try:						links = i.a['href']						if checker in links:							link = requests.get(links, headers=Headers).text							soup = BeautifulSoup(link,'html.parser')							links = soup.select("a[data-actuallink]")							for sources in links:								source = sources['data-actuallink']								self.cleaned.append(source)					except: pass				sort = list(dict.fromkeys(self.cleaned))				for urls in sort:					hmf = resolveurl.HostedMediaFile(urls)					if hmf.valid_url():						qual = 'HD'						quality = '7'						title = ('[COLOR white]WATCHEPISODES ( Resolve Url ) | %s | %s[/COLOR]' % (qual,MovieTitle))						self.links.append({'title': title, 'url': urls, 'quality': quality, 'Debrid' : False, 'Direct' : False})				if len(self.links) < 1: xbmc.log("No Results From ::: WatchEpisodes" , level=Notice) 				else: return self.links			except Exception as c:				xbmc.log("SCRAPER ERROR WatchEpisodes  ::: %s" %c , level=Notice)		else: xbmc.log("SCRAPER WatchEpisodes TVSHOWS ONLY  ::: %s" %term.title() , level=Notice)