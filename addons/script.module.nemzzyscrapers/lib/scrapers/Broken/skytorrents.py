import requestsimport refrom kodi_six import xbmc, xbmcgui, xbmcaddonfrom six import PY2from bs4 import BeautifulSoupfrom tools import cfscrapecloudflare = cfscrape.create_scraper()Headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' }dialog = xbmcgui.Dialog()Notice = xbmc.LOGNOTICE if PY2 else xbmc.LOGINFO###### If Cached Only Active ######class Scraper:    def __init__(self):        self.Base = 'https://skytorrents.net/?search=%s&sort=seeders'        self.Search = ('?search=')        self.links = []        self.cached = []    def Index(self,type, term,year,imdb):        try:            if type == 'TV':                MovieName = term                                SE = re.findall('''(s[0-9]+e[0-9]+)''',term,flags=re.I)[0]                term = term.replace(' ','+')                link = cloudflare.get(self.Base %term, headers=Headers).text                soup = BeautifulSoup(link,'html.parser')                data = soup.find_all("tr",  class_={'result'})                for i in data:                    try:                        title = i.img['alt']                        if SE.lower() in title.lower():                            magnet = i.select_one("a[href*=magnet]")['href']                            if 'uhd' in title.lower(): sort = '5' ; qual = '4K UHD'                            elif '2160' in title.lower(): sort = '5'; qual = '4K UHD'                            elif '1080' in title.lower(): sort = '6'; qual = 'FHD'                            elif '720' in title.lower(): sort = '7'; qual = 'HD'                            elif 'hdtv' in title.lower(): sort = '7'; qual = 'HD'                            else : sort = '8'; qual = 'SD'                            name = ('SkyTorrents ( Debrid ) | %s | %s' %(qual,MovieName))                            self.links.append({'title': name, 'url': magnet, 'quality' : sort, 'Debrid' : True, 'Direct' : False})                    except: pass                if len(self.links) <= 1: xbmc.log("No Results From ::: SkyTorrents" , level=Notice)                 else: return self.links            else:                MovieName = term                year = year.strip()                term = term.replace(' ','+')                term = term+'+'+year                link = cloudflare.get(self.Base %term, headers=Headers).text                soup = BeautifulSoup(link,'html.parser')                data = soup.find_all("tr",  class_={'result'})                for i in data:                    try:                        title = i.img['alt']                        if year in title.lower():                            magnet = i.select_one("a[href*=magnet]")['href']                            if 'uhd' in title.lower(): sort = '5' ; qual = '4K UHD'                            elif '2160' in title.lower(): sort = '5'; qual = '4K UHD'                            elif '1080' in title.lower(): sort = '6'; qual = 'FHD'                            elif '720' in title.lower(): sort = '7'; qual = 'HD'                            elif 'hdtv' in title.lower(): sort = '7'; qual = 'HD'                            else : sort = '8'; qual = 'SD'                            name = ('SkyTorrents ( Debrid ) | %s | %s' %(qual,MovieName))                            self.links.append({'title': name, 'url': magnet, 'quality' : sort, 'Debrid' : True, 'Direct' : False})                    except: pass                if len(self.links) <= 1: xbmc.log("No Results From ::: SkyTorrents" , level=Notice)                 else: return self.links        except Exception as c:                xbmc.log("SCRAPER ERROR SkyTorrents  ::: %s" %c , level=Notice)