import requestsimport reimport xbmc, xbmcgui, xbmcaddonfrom bs4 import BeautifulSoupimport jsonimport randomHeaders = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' }dialog = xbmcgui.Dialog()Notice = xbmc.LOGINFOuser_agent_list = [    ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"     "Chrome/77.0.3865.90 Safari/537.36"),    ("Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"     "Chrome/79.0.3945.130 Safari/537.36"),]def get_headers():    headers = {        "Connection": "keep-alive",        "Cache-Control": "max-age=0",        "Upgrade-Insecure-Requests": "1",        "User-Agent": random.choice(user_agent_list),        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",        "Accept-Encoding": "gzip, deflate",        "Accept-Language": "en-US,en;q=0.9,fr;q=0.8",        "Sec-Ch-Ua" : "Microsoft Edge;v=131, Chromium;v=131, Not_A Brand;v=24"    }    return headersclass Scraper:    def __init__(self):        self.Movie = 'https://torrentio.strem.fun/yts,eztv,rarbg,1337x,kickasstorrents,torrentgalaxy,magnetdl,horriblesubs,nyaasi,nyaapantsu/stream/movie/%s.json'        self.Show = 'https://torrentio.strem.fun/yts,eztv,rarbg,1337x,kickasstorrents,torrentgalaxy,magnetdl,horriblesubs,nyaasi,nyaapantsu/stream/series/%s:%s:%s.json'        self.Search = ('?query=')        self.links = []    def Index(self,type, term,year,imdb):        try:            if type == 'TV':                def get_string_between(s, start, end):                    try:                        return s.split(start)[1].split(end)[0]                    except IndexError:                        return None                Epi = term.split('|E')[1]                #dialog.ok("EPI",str(imdb))                Season = get_string_between(term, 'S-', '|')                term = term.replace(' ','+')                link = requests.get(self.Show % (imdb,Season,Epi), headers=Headers).text                data = str(link)                #dialog.ok("DAT",str(data))                data = data.encode('ascii', 'ignore').decode('ascii')                data = json.loads(data)                links = data['streams']                for i in links:                    try:                        title = i['behaviorHints']['filename']                    except:                        title = 'Unkown'                    hash_code = i['infoHash']                    if 'uhd' in title.lower(): sort = '5' ; qual = '4K UHD'                    elif '2160' in title.lower(): sort = '5'; qual = '4K UHD'                    elif '1080' in title.lower(): sort = '6'; qual = 'FHD'                    elif '720' in title.lower(): sort = '7'; qual = 'HD'                    elif 'hdtv' in title.lower(): sort = '7'; qual = 'HD'                    else : sort = '8'; qual = 'SD'                    url2 = ('magnet:?xt=urn:btih:%s' % hash_code)                    name = ('%s | %s' %(qual,title))                    self.links.append({'title': name, 'url': url2, 'quality' : sort, 'Debrid' : True, 'Direct' : False})                if len(self.links) < 1: xbmc.log("No Results From ::: 7Torrents" , level=Notice)                 else: return self.links            else:                try:                    link = requests.get(self.Movie %imdb, headers=Headers).text                    data = str(link)                    data = data.encode('ascii', 'ignore').decode('ascii')                    data = json.loads(data)                    links = data['streams']                    for i in links:                        try:                            title = i['behaviorHints']['filename']                        except:                            title = 'Unkown'                        hash_code = i['infoHash']                        if 'uhd' in title.lower(): sort = '5' ; qual = '4K UHD'                        elif '2160' in title.lower(): sort = '5'; qual = '4K UHD'                        elif '1080' in title.lower(): sort = '6'; qual = 'FHD'                        elif '720' in title.lower(): sort = '7'; qual = 'HD'                        elif 'hdtv' in title.lower(): sort = '7'; qual = 'HD'                        else : sort = '8'; qual = 'SD'                        url2 = ('magnet:?xt=urn:btih:%s' % hash_code)                        name = ('%s | %s' %(qual,title))                        self.links.append({'title': name, 'url': url2, 'quality' : sort, 'Debrid' : True, 'Direct' : False})                    if len(self.links) < 1: xbmc.log("No Results From ::: Torrentio" , level=Notice)                     else: return self.links                except Exception: pass        except Exception as c:            xbmc.log("SCRAPER ERROR Torrentio  ::: %s" %c , level=Notice)